[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introducción a R",
    "section": "",
    "text": "2 Instalando  y R Studio\nR Studio es un entorno de desarrollo integrado (IDE por sus siglas en inglés), con varias herramientas que permiten utilizar los lenguajes de programación R y python, ambas utilizadas ampliamente en la ciencia de datos. Este software provee una interfaz intuitiva que permite un manejo fácil y amigable de cualquier tipo de datos. Tanto R como R Studio son de código abierto y pueden descargarse gratuitamente.\nActualmente, existen dos alternativas para utilizar R Studio. Este puede instalarse localmente en un computador, o puedes utilizarlo en la web a través de Posit Cloud. Esta última opción es muy útil si tu computador no cuenta con suficiente memoria RAM. Crear una cuenta en Posit cloud es gratis y puedes crear hasta 25 proyectos. Para hacerlo solamente sigue este enlace, haz clic en Sign up, y sigue las instrucciones.\nUna vez hayas creado tu cuenta, verás una ventana como la siguiente y puedes crear un nuevo proyecto:\nPor el contrario, si quieres tener R y R Studio en tu computador debes contar con acceso a internet y cualquier navegador web de tu preferencia, Chrome, Firefox, etc. Si tu Sistema Operativo es Windows la descarga de R debe hacerse desde el subdirectorio base en la web de CRAN (Comprehensive R Archive Network), aquí. De la misma manera, R Studio para Windows puede ser descargado desde aquí. Si surge algún problema durante la instalación o quieres saber más sobre R, puedes dirigirte a la sección de Preguntas frecuentes de R.\nSi tienes otro Sistema Operativo o tienes un nivel medio o avanzado en el uso de R, te recomiendo leer este tutorial de instalación.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción a la Telemetría de Grandes Mamíferos",
    "section": "",
    "text": "Prefacio\nEste es el curso de Introduccion a la Ecología y telemetria de Grandes mamiferos de la Fundación Oso Andino.\nPara conocer más sobre nuestra Fundación visitanos en https://osoandino.org.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "intro.html#vectores",
    "href": "intro.html#vectores",
    "title": "1  Introducción a R",
    "section": "6.1 Vectores",
    "text": "6.1 Vectores\nUn vector es una secuencia de datos del mismo tipo ya sean numéricos o de carácter. Así, para construir vectores numéricos, deberemos primeramente nombrar a nuestro objeto y asignarle valores mediante &lt;-. Supongamos que quieres almacenar los resultados de las operaciones anteriores en un objeto “x” e “y”.\n\nx &lt;- log(5)\n\ny &lt;- log(5)/log2(5*3)\n\nObserva que en el panel Environment ahora hay dos objetos que corresponden a los vectores numéricos que creaste con los resultados de cada operación. De esta manera, ahora será más fácil manipular estos datos.\n\n# Ejecuta lo siguiente\nx*y\n\n# Almacena el resultado de ambos objetos en un vector nuevo\nz &lt;- x*y\n\n# Puedes imprimir el resultado en la consola\nz\n\nAhora crea una secuencia de números dentro de un vector. Una forma rápida de crear este tipo de vectores es mediante la función seq.\n\n# Puedes crear números sucesivos del 1 - 10\na &lt;- c(1:10)\n\n# O una secuencia hasta el 15 con un intervalo de 3\nb &lt;- seq(1, 15, 3)\n\nLa función seq crea secuencias en este caso del número 1 hasta el 15, con un intervalo de 3. Pero, ¿cómo podrías saber qué significa cada argumento dentro de una función si no la conoces?\nExisten dos maneras de indagar sobre una función cualquiera y obtener ayuda sobre la misma:\n\n?seq\nhelp(seq)\n\nLa sección de ayuda contiene todo lo que debes saber sobre cualquier función, al final de cada manual de instrucciones de la función podrás ver además ejemplos que te ayudarán a entenderla y aplicarla según tus necesidades.\nAhora bien, puedes aplicar esto a un ejemplo más cotidiano. Imagina que posees datos de distintos pesos de varios individuos de una especie de roedor que has capturado y quieres realizar algunas operaciones con ellos. Almacena estos pesos dentro de un vector utilizando la función concatenar c().\n\npesos &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\n\nAhora que tienes estos datos almacenados en un vector, puedes realizar operaciones con ellos.\n\n# Número de observaciones\nlength(pesos)\n\n# Valores minimo o maximo de estos datos\nmin(pesos)\nmax(pesos)\n\n# Promedio\nmean(pesos)\n\nPara hacer este ejemplo aún más real, imagina que las medidas tomadas eran erróneas o ya no sirven para su estudio. Puedes entonces modificar el vector de la siguiente manera:\n\n# Elimina el cuarto valor en nuestro vector\npesos_mod &lt;- pesos[-4]\n\n# Remueve desde el primer hasta el quinto valor\npesos_mod &lt;- pesos[-1:-5]\n\n# Agrega más valores al vector\npesos_mod &lt;- c(pesos, 21, 28.3, 31, 26.5)\n\nCuando modificas un vector es usualmente aconsejable crear uno nuevo y almacenar la nueva información en éste. El código no siempre se verá tan sencillo como en el ejemplo anterior y es mejor trabajar de una manera segura al manipular metadatos.\nEs muy útil saber que si deseas eliminar cualquier objeto, lo puedes hacer en cualquier momento mediante la función remove() o rm(). Esto es especialmente útil si estás trabajando con un set de datos muy grande y quieres liberar memoria.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#matrices",
    "href": "intro.html#matrices",
    "title": "1  Introducción a R",
    "section": "6.2 Matrices",
    "text": "6.2 Matrices\nUna matriz no es más que un conjunto de datos del mismo tipo organizado de forma bidimensional, es decir, en filas y columnas. Crear y modificar matrices tiene también un proceso parecido al de los vectores.\n\nmatriz &lt;- matrix(1:14, ncol=7)\nmatriz\n\n\n\n\n\n\n\nEjercicio\n\n\n\nOrganiza diferentes matrices con diferentes números de columnas y filas, usa help(matrix) para saber como hacerlo. ¿Qué sucede si organizas la matriz mediante matrix(2:14, ncol=3)?:\n\n\nEste método solo crea matrices con datos secuenciales, entonces ¿cómo podrías organizar distintos pesos de roedores de forma bidimensional? Siguiendo con el ejemplo de los roedores, supongamos que tienes dos especies de roedores.\n\nroedor1 &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\nroedor2 &lt;- c(26, 26.5, 30, 20, 31, 27.5, 28, 20.8)\n\n# Lee sobre cbind usando help()\nroedores &lt;- cbind(roedor1, roedor2)\n\n# Ahora utiliza rbind() para unir ambos vectores. ¿Cuál es la diferencia?\n\nAl igual que los vectores, las matrices también pueden ser modificadas. Sin embargo, al haber añadido una dimensión más a nuestros datos, la forma de escribir los códigos cambia dependiendo de si quieres modificar una fila o una columna.\n\n# Elimina la cuarta fila\nroedores_mod &lt;- roedores[-4,]\n\n# Elimina la 1ra, 2da y 7ma fila\nroedores_mod &lt;- roedores[c(-1,-2,-7),]\n\n# Ahora intenta esto\nroedores_mod &lt;- roedores[,-1]\n# ¿Qué pasó luego de ejecutar este código?\n# Observa la posición de la coma\n\n\n\n\n\n\n\nEjercicio\n\n\n\nAñade dos nuevas columnas a la matriz roedores y posteriormente elimina los datos desde la 2da hasta la 4ta fila.\n\n\nTambién puedes usar distintas funciones para analizar cualquier matriz.\n\nhead(roedores)\nnrow(roedores)\nclass(roedores)\n\nPuedes leer mas sobre estas funciones en la sección de ayuda.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#data-frames",
    "href": "intro.html#data-frames",
    "title": "1  Introducción a R",
    "section": "6.3 Data frames",
    "text": "6.3 Data frames\nUn data frame es un set de datos que puede estar conformado tanto por valores numéricos o también por caracteres. Trabajar con este tipo de objetos es una aproximación más realista debido al tipo de .\nContinuemos con nuestro ejemplo de los roedores, supongamos que quieres agregar una columna que contenga un vector de caracteres y se le asigne el nombre de especie a cada roedor. Para este propósito organizaremos los datos de pesos de los roedores en filas.\n\n# Añade varias veces los objetos creados anteriormente\nroedores &lt;- cbind(roedor1, roedor2, roedor1, roedor2)\nclass(roedores)\n\n[1] \"matrix\" \"array\" \n\n#Crea un vector de caracteres\nlocalidad &lt;- c(\"Quito\", \"Guayaquil\")\n\nEl objeto roedores es aún una matriz, ¿cómo podrías añadir las localidades para convertirlo en un data frame?\n\n# Utiliza la función data.frame\nroedores &lt;- data.frame(roedores, localidad)\n\n# Analiza el data frame\nclass(roedores)\nsummary(roedores)\nstr(roedores)\n\nLa función summary y str nos brindan información relevantes que será necesaria en clases posteriores. ¿Qué pasa si quieres saber algo más específico como cuántos valores por debajo de 25 existen en el data frame?\n\nroedores &lt;= 25\n\n     roedor1 roedor2 roedor1.1 roedor2.1 localidad\n[1,]    TRUE   FALSE      TRUE     FALSE     FALSE\n[2,]   FALSE   FALSE     FALSE     FALSE     FALSE\n[3,]   FALSE   FALSE     FALSE     FALSE     FALSE\n[4,]    TRUE    TRUE      TRUE      TRUE     FALSE\n[5,]   FALSE   FALSE     FALSE     FALSE     FALSE\n[6,]   FALSE   FALSE     FALSE     FALSE     FALSE\n[7,]    TRUE   FALSE      TRUE     FALSE     FALSE\n[8,]   FALSE    TRUE     FALSE      TRUE     FALSE\n\n\nEjecutar este código nos devuelve valores lógicos o también llamados booleanos como resultado. Cada TRUE o FALSE puede ser contado individualmente, pero ¿cómo lograrías contarlos automáticamente?\n\nsum(roedores&lt;= 25)\n#Ahora utiliza la función which(), ¿cuál es la diferencia?\n\nTambién puedes elegir columnas individuales y realizar el mismo procedimiento. El signo $ señala cual es la columna de la cual quieres tomar los datos.\n\nroedores$roedor1 &gt; 25\n\nLa manipulación de esta clase de objetos será ampliada y tratada con más detenimiento en la siguiente clase.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#listas",
    "href": "intro.html#listas",
    "title": "1  Introducción a R",
    "section": "6.4 Listas",
    "text": "6.4 Listas\nxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#dplyr-ggplot2-y-tidyverse",
    "href": "intro.html#dplyr-ggplot2-y-tidyverse",
    "title": "1  Introducción a R",
    "section": "7.1 dplyr, ggplot2 y tidyverse",
    "text": "7.1 dplyr, ggplot2 y tidyverse\nTidyverse es una colección de paquetes que contiene a dplyr y ggplot2. Estos han sido creados para facilitar la manipulación y vsualización de datos mediante gráficos estéticos con varias opciones para modificarlos y presentarlos. Puedes ver algunos ejemplos en la galería oficial de ggplot2, y varios ejemplos sobre las extensiones que han sido escritas para ampliar aún más el funcionamiento de este paquete.\nUna vez hayas activado dplyr, ya puedes buscat datos específicos en el data frame “roedores”.\n\nlibrary(dplyr)\n\n# Filtra por localidad\nfilter(roedores, localidad == \"Quito\")\n\n# Almacena los resultados en un objeto nuevo llamado capital\ncapital &lt;- filter(roedores, localidad == \"Quito\")\ncapital &lt;- select(capital, roedor2)\n\n📚 Tarea\nUtiliza todo lo aprendido en esta clase y el set de datos roedores y responde: ¿cuántos individuos de Guayaquil tienen pesos menores o iguales a 26.5?\n\n7.1.1 ggplot2\nAhora puedes visualizar los datos de una manera más atractiva y comprensible. Para ello, activa el paquete ggplot2 y ejecuta:\n\nggplot(data = roedores) +\n  geom_point(aes(x = roedor1, y = roedor2),\n             size = 5)\n\n\n\n\n\n\n\n\n📚 Tarea\nUtiliza el manual de ayuda de geom_point() para descifrar como elaboré este gráfico:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  }
]