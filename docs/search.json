[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introducción a R",
    "section": "",
    "text": "1.1 Instalando  y R Studio\nR Studio es un entorno de desarrollo integrado (IDE por sus siglas en inglés), con varias herramientas que permiten utilizar los lenguajes de programación R y python, ambas utilizadas ampliamente en la ciencia de datos. Este software provee una interfaz intuitiva que permite un manejo fácil y amigable de cualquier tipo de datos. Tanto R como R Studio son de código abierto y pueden descargarse gratuitamente.\nActualmente, existen dos alternativas para utilizar R Studio. Este puede instalarse localmente en un computador, o puedes utilizarlo en la web a través de Posit Cloud. Esta última opción es muy útil si tu computador no cuenta con suficiente memoria RAM. Crear una cuenta en Posit cloud es gratis y puedes crear hasta 25 proyectos. Para hacerlo solamente sigue este enlace, haz clic en Sign up, y sigue las instrucciones.\nUna vez hayas creado tu cuenta, verás una ventana como la siguiente y puedes crear un nuevo proyecto:\nPor el contrario, si quieres tener R y R Studio en tu computador debes contar con acceso a internet y cualquier navegador web de tu preferencia, Chrome, Firefox, etc. Si tu Sistema Operativo es Windows la descarga de R debe hacerse desde el subdirectorio base en la web de CRAN (Comprehensive R Archive Network), aquí. De la misma manera, R Studio para Windows puede ser descargado desde aquí. Si surge algún problema durante la instalación o quieres saber más sobre R, puedes dirigirte a la sección de Preguntas frecuentes de R.\nSi tienes otro Sistema Operativo o tienes un nivel medio o avanzado en el uso de R, te recomiendo leer este tutorial de instalación.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Resumen",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Resumen</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción a la Telemetría de Grandes Mamíferos",
    "section": "",
    "text": "Inicio\nEste es el curso de Introduccion a la Ecología y Telemetria de Grandes mamiferos dictado por la Fundación Oso Andino. Puedes enterarte sobre el cronograma de actividades aquí.",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "intro.html#vectores",
    "href": "intro.html#vectores",
    "title": "1  Introducción a R",
    "section": "1.6 Vectores",
    "text": "1.6 Vectores\nUn vector es una secuencia de datos del mismo tipo ya sean numéricos o de carácter. Así, para construir vectores numéricos, deberemos primeramente nombrar a nuestro objeto y asignarle valores mediante &lt;-. Supongamos que quieres almacenar los resultados de las operaciones anteriores en un objeto “x” e “y”.\n\nx &lt;- log(5)\n\ny &lt;- log(5)/log2(5*3)\n\nObserva que en el panel Environment ahora hay dos objetos que corresponden a los vectores numéricos que creaste con los resultados de cada operación. De esta manera, ahora será más fácil manipular estos datos.\n\n# Ejecuta lo siguiente\nx*y\n\n# Almacena el resultado de ambos objetos en un vector nuevo\nz &lt;- x*y\n\n# Puedes imprimir el resultado en la consola\nz\n\nAhora crea una secuencia de números dentro de un vector. Una forma rápida de crear este tipo de vectores es mediante la función seq.\n\n# Puedes crear números sucesivos del 1 - 10\na &lt;- c(1:10)\n\n# O una secuencia hasta el 15 con un intervalo de 3\nb &lt;- seq(1, 15, 3)\n\nLa función seq crea secuencias en este caso del número 1 hasta el 15, con un intervalo de 3. Pero, ¿cómo podrías saber qué significa cada argumento dentro de una función si no la conoces?\nExisten dos maneras de indagar sobre una función cualquiera y obtener ayuda sobre la misma:\n\n?seq\nhelp(seq)\n\nLa sección de ayuda contiene todo lo que debes saber sobre cualquier función, al final de cada manual de instrucciones de la función podrás ver además ejemplos que te ayudarán a entenderla y aplicarla según tus necesidades.\nAhora bien, puedes aplicar esto a un ejemplo más cotidiano. Imagina que posees datos de distintos pesos de varios individuos de una especie de roedor que has capturado y quieres realizar algunas operaciones con ellos. Almacena estos pesos dentro de un vector utilizando la función concatenar c().\n\npesos &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\n\nAhora que tienes estos datos almacenados en un vector, puedes realizar operaciones con ellos.\n\n# Número de observaciones\nlength(pesos)\n\n# Valores minimo o maximo de estos datos\nmin(pesos)\nmax(pesos)\n\n# Promedio\nmean(pesos)\n\nPara hacer este ejemplo aún más real, imagina que las medidas tomadas eran erróneas o ya no sirven para su estudio. Puedes entonces modificar el vector de la siguiente manera:\n\n# Elimina el cuarto valor en nuestro vector\npesos_mod &lt;- pesos[-4]\n\n# Remueve desde el primer hasta el quinto valor\npesos_mod &lt;- pesos[-1:-5]\n\n# Agrega más valores al vector\npesos_mod &lt;- c(pesos, 21, 28.3, 31, 26.5)\n\nCuando modificas un vector es usualmente aconsejable crear uno nuevo y almacenar la nueva información en éste. El código no siempre se verá tan sencillo como en el ejemplo anterior y es mejor trabajar de una manera segura al manipular metadatos.\nEs muy útil saber que si deseas eliminar cualquier objeto, lo puedes hacer en cualquier momento mediante la función remove() o rm(). Esto es especialmente útil si estás trabajando con un set de datos muy grande y quieres liberar memoria.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#matrices",
    "href": "intro.html#matrices",
    "title": "1  Introducción a R",
    "section": "1.7 Matrices",
    "text": "1.7 Matrices\nUna matriz no es más que un conjunto de datos del mismo tipo organizado de forma bidimensional, es decir, en filas y columnas. Crear y modificar matrices tiene también un proceso parecido al de los vectores.\n\nmatriz &lt;- matrix(1:14, ncol=7)\nmatriz\n\n\n\n\n\n\n\nEjercicio\n\n\n\nOrganiza diferentes matrices con diferentes números de columnas y filas, usa help(matrix) para saber como hacerlo. ¿Qué sucede si organizas la matriz mediante matrix(2:14, ncol=3)?:\n\n\nEste método solo crea matrices con datos secuenciales, entonces ¿cómo podrías organizar distintos pesos de roedores de forma bidimensional? Siguiendo con el ejemplo de los roedores, supongamos que tienes dos especies de roedores.\n\nroedor1 &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\nroedor2 &lt;- c(26, 26.5, 30, 20, 31, 27.5, 28, 20.8)\n\n# Lee sobre cbind usando help()\nroedores &lt;- cbind(roedor1, roedor2)\n\n# Ahora utiliza rbind() para unir ambos vectores. ¿Cuál es la diferencia?\n\nAl igual que los vectores, las matrices también pueden ser modificadas. Sin embargo, al haber añadido una dimensión más a nuestros datos, la forma de escribir los códigos cambia dependiendo de si quieres modificar una fila o una columna.\n\n# Elimina la cuarta fila\nroedores_mod &lt;- roedores[-4,]\n\n# Elimina la 1ra, 2da y 7ma fila\nroedores_mod &lt;- roedores[c(-1,-2,-7),]\n\n# Ahora intenta esto\nroedores_mod &lt;- roedores[,-1]\n# ¿Qué pasó luego de ejecutar este código?\n# Observa la posición de la coma\n\n\n\n\n\n\n\nEjercicio\n\n\n\nAñade dos nuevas columnas a la matriz roedores y posteriormente elimina los datos desde la 2da hasta la 4ta fila.\n\n\nTambién puedes usar distintas funciones para analizar cualquier matriz.\n\nhead(roedores)\nnrow(roedores)\nclass(roedores)\n\nPuedes leer mas sobre estas funciones en la sección de ayuda.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#data-frames",
    "href": "intro.html#data-frames",
    "title": "1  Introducción a R",
    "section": "1.8 Data frames",
    "text": "1.8 Data frames\nUn data frame es un set de datos que puede estar conformado tanto por valores numéricos o también por caracteres. Trabajar con este tipo de objetos es una aproximación más realista debido al tipo de .\nContinuemos con nuestro ejemplo de los roedores, supongamos que quieres agregar una columna que contenga un vector de caracteres y se le asigne el nombre de especie a cada roedor. Para este propósito organizaremos los datos de pesos de los roedores en filas.\n\n# Añade varias veces los objetos creados anteriormente\nroedores &lt;- cbind(roedor1, roedor2, roedor1, roedor2)\nclass(roedores)\n## [1] \"matrix\" \"array\"\n\n#Crea un vector de caracteres\nlocalidad &lt;- c(\"Quito\", \"Guayaquil\")\n\nEl objeto roedores es aún una matriz, ¿cómo podrías añadir las localidades para convertirlo en un data frame?\n\n# Utiliza la función data.frame\nroedores &lt;- data.frame(roedores, localidad)\n\n# Analiza el data frame\nclass(roedores)\nsummary(roedores)\nstr(roedores)\n\nLa función summary y str nos brindan información relevantes que será necesaria en clases posteriores. ¿Qué pasa si quieres saber algo más específico como cuántos valores por debajo de 25 existen en el data frame?\n\nroedores &lt;= 25\n##      roedor1 roedor2 roedor1.1 roedor2.1 localidad\n## [1,]    TRUE   FALSE      TRUE     FALSE     FALSE\n## [2,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [3,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [4,]    TRUE    TRUE      TRUE      TRUE     FALSE\n## [5,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [6,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [7,]    TRUE   FALSE      TRUE     FALSE     FALSE\n## [8,]   FALSE    TRUE     FALSE      TRUE     FALSE\n\nEjecutar este código nos devuelve valores lógicos o también llamados booleanos como resultado. Cada TRUE o FALSE puede ser contado individualmente, pero ¿cómo lograrías contarlos automáticamente?\n\nsum(roedores&lt;= 25)\n#Ahora utiliza la función which(), ¿cuál es la diferencia?\n\nTambién puedes elegir columnas individuales y realizar el mismo procedimiento. El signo $ señala cual es la columna de la cual quieres tomar los datos.\n\nroedores$roedor1 &gt; 25\n\nLa manipulación de esta clase de objetos será ampliada y tratada con más detenimiento en la siguiente clase.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#listas",
    "href": "intro.html#listas",
    "title": "1  Introducción a R",
    "section": "1.6 Listas",
    "text": "1.6 Listas\nxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#dplyr-ggplot2-y-tidyverse",
    "href": "intro.html#dplyr-ggplot2-y-tidyverse",
    "title": "1  Introducción a R",
    "section": "2.1 dplyr, ggplot2 y tidyverse",
    "text": "2.1 dplyr, ggplot2 y tidyverse\nTidyverse es una colección de paquetes que contiene a dplyr y ggplot2. Estos han sido creados para facilitar la manipulación y vsualización de datos mediante gráficos estéticos con varias opciones para modificarlos y presentarlos. Puedes ver algunos ejemplos en la galería oficial de ggplot2, y varios ejemplos sobre las extensiones que han sido escritas para ampliar aún más el funcionamiento de este paquete.\nUna vez hayas activado dplyr, ya puedes buscat datos específicos en el data frame “roedores”.\n\nlibrary(dplyr)\n\n# Filtra por localidad\nfilter(roedores, localidad == \"Quito\")\n\n# Almacena los resultados en un objeto nuevo llamado capital\ncapital &lt;- filter(roedores, localidad == \"Quito\")\ncapital &lt;- select(capital, roedor2)\n\n📚 Tarea\nUtiliza todo lo aprendido en esta clase y el set de datos roedores y responde: ¿cuántos individuos de Guayaquil tienen pesos menores o iguales a 26.5?\n\n2.1.1 ggplot2\nAhora puedes visualizar los datos de una manera más atractiva y comprensible. Para ello, activa el paquete ggplot2 y ejecuta:\n\nggplot(data = roedores) +\n  geom_point(aes(x = roedor1, y = roedor2),\n             size = 5)\n\n\n\n\n\n\n\n\n📚 Tarea\nUtiliza el manual de ayuda de geom_point() para descifrar como elaboré este gráfico:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "index.html#agradecimientos",
    "href": "index.html#agradecimientos",
    "title": "Introducción a la Telemetría de Grandes Mamíferos",
    "section": "Agradecimientos",
    "text": "Agradecimientos\nEsta edición del curso ha sido auspiciada por el Instituto Nacional de Biodiversidad y la Universidad Técnica de Cotopaxi.",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "intro.html#ya-has-instalado-r-studio-y-ahora-qué",
    "href": "intro.html#ya-has-instalado-r-studio-y-ahora-qué",
    "title": "1  Introducción a R",
    "section": "1.2 !Ya has instalado R Studio! ¿Y ahora qué?",
    "text": "1.2 !Ya has instalado R Studio! ¿Y ahora qué?\nUna vez que abras R Studio notarás muchas opciones, paneles y una consola que puede parecer confusa al principio pero ahora te familiarizarás rápidamente con esta interfaz.\nLa barra de herramientas en la parte superior contiene las opciones File, Edit, Code, View, etc. Debajo de File puedes encontrar un icono similar a este . Una vez hagas clic en este, podrás ver una amplia lista de documentos que puedes crear, entre ellos R Script. Este es el tipo de documento que utilizaremos para escribir nuestros códigos.\n\n\n\n\n\n\nNote\n\n\n\nTambién puedes crear un nuevo script presionando Ctrl+Shift+N.\n\n\n\n\n\n\n\nUna vez que hayas creado un nuevo script, R Studio lucirá de la siguiente manera:\n\n\n\n\n\nAhora puedes observar 4 paneles con varias opciones dentro de cada uno.\n\nSource es el panel en el que manipularemos y almacenaremos nuestros códigos como Scripts.\nEnvironment almacena los objetos que son creados a lo largo de nuestro trabajo.\nEl panel que contiene a las pestañas Files, Plots, Packages, Help y Viewer, nos permite encontrar de manera rápida y eficiente los archivos en nuestro directorio de trabajo (Files), los gráficos generados a partir de análisis (Plots), los paquetes instalados (Packages), manuales de ayuda de R y de paquetes instalados (Help), y por último encontramos a Viewer, un panel que nos muestra gráficos interactivos generados por algunos paquetes.\nEn Console encontrarás el signo “&gt;” llamado prompt que nos muestra si el sistema está listo o no para ejecutar un comando. Además, los resultados de los análisis se mostrarán aquí.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#qué-es-un-script",
    "href": "intro.html#qué-es-un-script",
    "title": "1  Introducción a R",
    "section": "1.3 ¿Qué es un script?",
    "text": "1.3 ¿Qué es un script?\nUn script es una serie de comandos escritos en un archivo de texto que pueden ser almacenados, editados y ejecutados. ¿Suena sencillo? Efectivamente es un concepto simple y tiene muchas ventajas si se lo compara con programas que no cuentan con esta opción. Un script nos brinda la posibilidad de editar cualquier línea de comando las veces que sea necesario, te permite retomar cualquier trabajo tras varios días, meses o años. Además puedes agregar comentarios sobre el código que escribes como veremos a continuación. Esto resulta extremanente útil si quieres compartir tu trabajo con otros, o si te encuentras trabajando en un proyecto extenso, el cual podrás retomar exactamente desde donde lo dejaste.\nAhora que conoces un poco más sobre esta interfaz, ¡ya puedes empezar!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#primeros-pasos",
    "href": "intro.html#primeros-pasos",
    "title": "1  Introducción a R",
    "section": "1.4 Primeros pasos",
    "text": "1.4 Primeros pasos\nEmpecemos escribiendo operaciones matemáticas sencillas en el script.\n\n2 + 2\n\nAhora presiona Enter, ¿qué sucede? Es importante saber que la ejecución de comandos con la tecla Enter se lleva a cabo solamente en la Consola. Si quieres ejecutar un código dentro del script, debes apretar Ctrl+Enter.\nAhora escribe la misma operación precedida por un signo numeral # y presiona Ctrl+Enter.\n\n# 2 + 2\n\n¿Hay algún resultado? Si colocamos este símbolo al iniciar una línea, esta no será leída como un código por R, por lo que no se ejecutará. Esto es muy útil al momento de agregar comentarios sobre el código que escribimos y para poder compartirlo con otros y así entiendan rápidamente que realizaste en tu trabajo.\nSigamos intentando con más operaciones matemáticas.\n\n# División\n8/2\n\n# Multiplicación y suma\n2*2+7\n2*(2+7) #¿Este resultado es diferente?\n\n# Potenciación\n3^3\n\n# Potencia negativa\n3^-3\n\n# También puedes ejecutar varias operaciones sobre una misma línea\n3*10 ; 15/45 ; 15-37\n\nCompliquemos esto aplicando otras funciones matemáticas.\n\n# Logaritmo\nlog(5)\n\n# Logaritmo natural y base 10 con otras operaciones\nlog(5)/log2 (5*3)\n\n# Raiz cuadrada\nsqrt(23.567)\n\n# Factorial\nfactorial (24)\n\nNota que los números ahora se encuentran dentro de un paréntesis y delante de una función. Existen probablemente millones de funciones en R con propósitos diferentes y específicos. Para poder ejecutarlas, éstas deben estar escritas con la estructura que viste en el ejemplo anterior función( ... ). Tú también puedes crear tus propias funciones, pero eso lo dejaremos para un curso más avanzado.\nTodos los resultados de estas operaciones se muestran en la Consola. Sin embargo, si quisieras almacenarlos y manipularlos es necesario transformarlos en objetos. Para ello debemos hablar sobre la estructura de datos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#estructura-de-datos-objetos-vectores-data-frames-y-listas.",
    "href": "intro.html#estructura-de-datos-objetos-vectores-data-frames-y-listas.",
    "title": "1  Introducción a R",
    "section": "1.5 Estructura de datos: Objetos, vectores, data frames, y listas.",
    "text": "1.5 Estructura de datos: Objetos, vectores, data frames, y listas.\nR contiene una jerarquía de elementos y provee varios tipos de estructuras de datos especializadas a las que se les conoce como objetos. Para los propósitos de este curso mencionaremos a los vectores y matrices pero nos enfocaremos en los data frames. Sin embargo, es importante saber que existen otros tipos de estructuras de datos como las listas, que utilizaremos ampliamente en el nivel avanzado de este curso.\n\n1.5.1 Vectores\nUn vector es una secuencia de datos del mismo tipo ya sean numéricos o de carácter. Así, para construir vectores numéricos, deberemos primeramente nombrar a nuestro objeto y asignarle valores mediante &lt;-. Supongamos que quieres almacenar los resultados de las operaciones anteriores en un objeto “x” e “y”.\n\nx &lt;- log(5)\n\ny &lt;- log(5)/log2(5*3)\n\nObserva que en el panel Environment ahora hay dos objetos que corresponden a los vectores numéricos que creaste con los resultados de cada operación. De esta manera, ahora será más fácil manipular estos datos.\n\n# Ejecuta lo siguiente\nx*y\n\n# Almacena el resultado de ambos objetos en un vector nuevo\nz &lt;- x*y\n\n# Puedes imprimir el resultado en la consola\nz\n\nAhora crea una secuencia de números dentro de un vector. Una forma rápida de crear este tipo de vectores es mediante la función seq.\n\n# Puedes crear números sucesivos del 1 - 10\na &lt;- c(1:10)\n\n# O una secuencia hasta el 15 con un intervalo de 3\nb &lt;- seq(1, 15, 3)\n\nLa función seq crea secuencias en este caso del número 1 hasta el 15, con un intervalo de 3. Pero, ¿cómo podrías saber qué significa cada argumento dentro de una función si no la conoces?\nExisten dos maneras de indagar sobre una función cualquiera y obtener ayuda sobre la misma:\n\n?seq\nhelp(seq)\n\nLa sección de ayuda contiene todo lo que debes saber sobre cualquier función, al final de cada manual de instrucciones de la función podrás ver además ejemplos que te ayudarán a entenderla y aplicarla según tus necesidades.\nAhora bien, puedes aplicar esto a un ejemplo más cotidiano. Imagina que posees datos de distintos pesos de varios individuos de una especie de roedor que has capturado y quieres realizar algunas operaciones con ellos. Almacena estos pesos dentro de un vector utilizando la función concatenar c().\n\npesos &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\n\nAhora que tienes estos datos almacenados en un vector, puedes realizar operaciones con ellos.\n\n# Número de observaciones\nlength(pesos)\n\n# Valores minimo o maximo de estos datos\nmin(pesos)\nmax(pesos)\n\n# Promedio\nmean(pesos)\n\nPara hacer este ejemplo aún más real, imagina que las medidas tomadas eran erróneas o ya no sirven para su estudio. Puedes entonces modificar el vector de la siguiente manera:\n\n# Elimina el cuarto valor en nuestro vector\npesos_mod &lt;- pesos[-4]\n\n# Remueve desde el primer hasta el quinto valor\npesos_mod &lt;- pesos[-1:-5]\n\n# Agrega más valores al vector\npesos_mod &lt;- c(pesos, 21, 28.3, 31, 26.5)\n\nCuando modificas un vector es usualmente aconsejable crear uno nuevo y almacenar la nueva información en éste. El código no siempre se verá tan sencillo como en el ejemplo anterior y es mejor trabajar de una manera segura al manipular metadatos.\nEs muy útil saber que si deseas eliminar cualquier objeto, lo puedes hacer en cualquier momento mediante la función remove() o rm(). Esto es especialmente útil si estás trabajando con un set de datos muy grande y quieres liberar memoria.\n\n\n1.5.2 Matrices\nUna matriz no es más que un conjunto de datos del mismo tipo organizado de forma bidimensional, es decir, en filas y columnas. Crear y modificar matrices tiene también un proceso parecido al de los vectores.\n\nmatriz &lt;- matrix(1:14, ncol=7)\nmatriz\n\n\n\n\n\n\n\nEjercicio\n\n\n\nOrganiza diferentes matrices con diferentes números de columnas y filas, usa help(matrix) para saber como hacerlo. ¿Qué sucede si organizas la matriz mediante matrix(2:14, ncol=3)?:\n\n\nEste método solo crea matrices con datos secuenciales, entonces ¿cómo podrías organizar distintos pesos de roedores de forma bidimensional? Siguiendo con el ejemplo de los roedores, supongamos que tienes dos especies de roedores.\n\nroedor1 &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\nroedor2 &lt;- c(26, 26.5, 30, 20, 31, 27.5, 28, 20.8)\n\n# Lee sobre cbind usando help()\nroedores &lt;- cbind(roedor1, roedor2)\n\n# Ahora utiliza rbind() para unir ambos vectores. ¿Cuál es la diferencia?\n\nAl igual que los vectores, las matrices también pueden ser modificadas. Sin embargo, al haber añadido una dimensión más a nuestros datos, la forma de escribir los códigos cambia dependiendo de si quieres modificar una fila o una columna.\n\n# Elimina la cuarta fila\nroedores_mod &lt;- roedores[-4,]\n\n# Elimina la 1ra, 2da y 7ma fila\nroedores_mod &lt;- roedores[c(-1,-2,-7),]\n\n# Ahora intenta esto\nroedores_mod &lt;- roedores[,-1]\n# ¿Qué pasó luego de ejecutar este código?\n# Observa la posición de la coma\n\n\n\n\n\n\n\nEjercicio\n\n\n\nAñade dos nuevas columnas a la matriz roedores y posteriormente elimina los datos desde la 2da hasta la 4ta fila.\n\n\nTambién puedes usar distintas funciones para analizar cualquier matriz.\n\nhead(roedores)\nnrow(roedores)\nclass(roedores)\n\nPuedes leer mas sobre estas funciones en la sección de ayuda.\n\n\n1.5.3 Data frames\nUn data frame es un set de datos que puede estar conformado tanto por valores numéricos o también por caracteres. Trabajar con este tipo de objetos es una aproximación más realista debido al tipo de .\nContinuemos con nuestro ejemplo de los roedores, supongamos que quieres agregar una columna que contenga un vector de caracteres y se le asigne el nombre de especie a cada roedor. Para este propósito organizaremos los datos de pesos de los roedores en filas.\n\n# Añade varias veces los objetos creados anteriormente\nroedores &lt;- cbind(roedor1, roedor2, roedor1, roedor2)\nclass(roedores)\n## [1] \"matrix\" \"array\"\n\n#Crea un vector de caracteres\nlocalidad &lt;- c(\"Quito\", \"Guayaquil\")\n\nEl objeto roedores es aún una matriz, ¿cómo podrías añadir las localidades para convertirlo en un data frame?\n\n# Utiliza la función data.frame\nroedores &lt;- data.frame(roedores, localidad)\n\n# Analiza el data frame\nclass(roedores)\nsummary(roedores)\nstr(roedores)\n\nLa función summary y str nos brindan información relevantes que será necesaria en clases posteriores. ¿Qué pasa si quieres saber algo más específico como cuántos valores por debajo de 25 existen en el data frame?\n\nroedores &lt;= 25\n##      roedor1 roedor2 roedor1.1 roedor2.1 localidad\n## [1,]    TRUE   FALSE      TRUE     FALSE     FALSE\n## [2,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [3,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [4,]    TRUE    TRUE      TRUE      TRUE     FALSE\n## [5,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [6,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [7,]    TRUE   FALSE      TRUE     FALSE     FALSE\n## [8,]   FALSE    TRUE     FALSE      TRUE     FALSE\n\nEjecutar este código nos devuelve valores lógicos o también llamados booleanos como resultado. Cada TRUE o FALSE puede ser contado individualmente, pero ¿cómo lograrías contarlos automáticamente?\n\nsum(roedores&lt;= 25)\n#Ahora utiliza la función which(), ¿cuál es la diferencia?\n\nTambién puedes elegir columnas individuales y realizar el mismo procedimiento. El signo $ señala cual es la columna de la cual quieres tomar los datos.\n\nroedores$roedor1 &gt; 25\n\nLa manipulación de esta clase de objetos será ampliada y tratada con más detenimiento en la siguiente clase.\n\n\n1.5.4 Listas\nxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#estructura-de-datos",
    "href": "intro.html#estructura-de-datos",
    "title": "1  Introducción a R",
    "section": "1.5 Estructura de datos",
    "text": "1.5 Estructura de datos\nR contiene una jerarquía de elementos y provee varios tipos de estructuras de datos especializadas a las que se les conoce como objetos. Para los propósitos de este curso mencionaremos a los vectores y matrices pero nos enfocaremos en los data frames. Sin embargo, es importante saber que existen otros tipos de estructuras de datos como las listas, que utilizaremos ampliamente en el nivel avanzado de este curso.\n\n1.5.1 Vectores\nUn vector es una secuencia de datos del mismo tipo ya sean numéricos o de carácter. Así, para construir vectores numéricos, deberemos primeramente nombrar a nuestro objeto y asignarle valores mediante &lt;-. Supongamos que quieres almacenar los resultados de las operaciones anteriores en un objeto “x” e “y”.\n\nx &lt;- log(5)\n\ny &lt;- log(5)/log2(5*3)\n\nObserva que en el panel Environment ahora hay dos objetos que corresponden a los vectores numéricos que creaste con los resultados de cada operación. De esta manera, ahora será más fácil manipular estos datos.\n\n# Ejecuta lo siguiente\nx*y\n\n# Almacena el resultado de ambos objetos en un vector nuevo\nz &lt;- x*y\n\n# Puedes imprimir el resultado en la consola\nz\n\nAhora crea una secuencia de números dentro de un vector. Una forma rápida de crear este tipo de vectores es mediante la función seq.\n\n# Puedes crear números sucesivos del 1 - 10\na &lt;- c(1:10)\n\n# O una secuencia hasta el 15 con un intervalo de 3\nb &lt;- seq(1, 15, 3)\n\nLa función seq crea secuencias en este caso del número 1 hasta el 15, con un intervalo de 3. Pero, ¿cómo podrías saber qué significa cada argumento dentro de una función si no la conoces?\nExisten dos maneras de indagar sobre una función cualquiera y obtener ayuda sobre la misma:\n\n?seq\nhelp(seq)\n\nLa sección de ayuda contiene todo lo que debes saber sobre cualquier función, al final de cada manual de instrucciones de la función podrás ver además ejemplos que te ayudarán a entenderla y aplicarla según tus necesidades.\nAhora bien, puedes aplicar esto a un ejemplo más cotidiano. Imagina que posees datos de distintos pesos de varios individuos de una especie de roedor que has capturado y quieres realizar algunas operaciones con ellos. Almacena estos pesos dentro de un vector utilizando la función concatenar c().\n\npesos &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\n\nAhora que tienes estos datos almacenados en un vector, puedes realizar operaciones con ellos.\n\n# Número de observaciones\nlength(pesos)\n\n# Valores minimos y maximos\nmin(pesos)\nmax(pesos)\n\n# Promedio\nmean(pesos)\n\nPara hacer este ejemplo aún más real, imagina que las medidas tomadas eran erróneas o ya no sirven para su estudio. Puedes entonces modificar el vector de la siguiente manera:\n\n# Elimina el cuarto valor en nuestro vector\npesos_mod &lt;- pesos[-4]\n\n# Remueve desde el primer hasta el quinto valor\npesos_mod &lt;- pesos[-1:-5]\n\n# Agrega más valores al vector\npesos_mod &lt;- c(pesos, 21, 28.3, 31, 26.5)\n\nCuando modificas un vector es usualmente aconsejable crear uno nuevo y almacenar la nueva información en éste. El código no siempre se verá tan sencillo como en el ejemplo anterior y es mejor trabajar de una manera segura al manipular metadatos.\nEs muy útil saber que si deseas eliminar cualquier objeto, lo puedes hacer en cualquier momento mediante la función remove() o rm(). Esto es especialmente útil si estás trabajando con un set de datos muy grande y quieres liberar memoria.\n\n\n1.5.2 Matrices\nUna matriz no es más que un conjunto de datos del mismo tipo organizado de forma bidimensional, es decir, en filas y columnas. Crear y modificar matrices tiene también un proceso parecido al de los vectores.\n\nmatriz &lt;- matrix(1:14, ncol=7)\nmatriz\n\n\n\n\n\n\n\nEjercicio\n\n\n\nOrganiza diferentes matrices con diferentes números de columnas y filas, usa help(matrix) para saber como hacerlo. ¿Qué sucede si organizas la matriz mediante matrix(2:14, ncol=3)?:\n\n\nEste método solo crea matrices con datos secuenciales, entonces ¿cómo podrías organizar distintos pesos de roedores de forma bidimensional? Siguiendo con el ejemplo de los roedores, supongamos que tienes dos especies de roedores.\n\nroedor1 &lt;- c(25, 27, 30, 20, 26, 27.5, 23, 30.8)\nroedor2 &lt;- c(26, 26.5, 30, 20, 31, 27.5, 28, 20.8)\n\n# Lee sobre cbind usando help()\nroedores &lt;- cbind(roedor1, roedor2)\n\n# Ahora utiliza rbind() para unir ambos vectores. ¿Cuál es la diferencia?\n\nAl igual que los vectores, las matrices también pueden ser modificadas. Sin embargo, al haber añadido una dimensión más a nuestros datos, la forma de escribir los códigos cambia dependiendo de si quieres modificar una fila o una columna.\n\n# Elimina la cuarta fila\nroedores_mod &lt;- roedores[-4,]\n\n# Elimina la 1ra, 2da y 7ma fila\nroedores_mod &lt;- roedores[c(-1,-2,-7),]\n\n# Ahora intenta esto\nroedores_mod &lt;- roedores[,-1]\n# ¿Qué pasó luego de ejecutar este código?\n# Observa la posición de la coma\n\n\n\n\n\n\n\nEjercicio\n\n\n\nAñade dos nuevas columnas a la matriz roedores y posteriormente elimina los datos desde la 2da hasta la 4ta fila.\n\n\nTambién puedes usar distintas funciones para analizar cualquier matriz.\n\nhead(roedores)\nnrow(roedores)\nclass(roedores)\n\nPuedes leer mas sobre estas funciones en la sección de ayuda.\n\n\n1.5.3 Data frames\nUn data frame es un set de datos que puede estar conformado tanto por valores numéricos o también por caracteres. Trabajar con este tipo de objetos es una aproximación más realista debido al tipo de .\nContinuemos con nuestro ejemplo de los roedores, supongamos que quieres agregar una columna que contenga un vector de caracteres y se le asigne el nombre de especie a cada roedor. Para este propósito organizaremos los datos de pesos de los roedores en filas.\n\n# Añade varias veces los objetos creados anteriormente\nroedores &lt;- cbind(roedor1, roedor2, roedor1, roedor2)\nclass(roedores)\n## [1] \"matrix\" \"array\"\n\n#Crea un vector de caracteres\nlocalidad &lt;- c(\"Quito\", \"Guayaquil\")\n\nEl objeto roedores es aún una matriz, ¿cómo podrías añadir las localidades para convertirlo en un data frame?\n\n# Utiliza la función data.frame\nroedores &lt;- data.frame(roedores, localidad)\n\n# Analiza el data frame\nclass(roedores)\nsummary(roedores)\nstr(roedores)\n\nLa función summary y str nos brindan información relevantes que será necesaria en clases posteriores. ¿Qué pasa si quieres saber algo más específico como cuántos valores por debajo de 25 existen en el data frame?\n\nroedores &lt;= 25\n##      roedor1 roedor2 roedor1.1 roedor2.1 localidad\n## [1,]    TRUE   FALSE      TRUE     FALSE     FALSE\n## [2,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [3,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [4,]    TRUE    TRUE      TRUE      TRUE     FALSE\n## [5,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [6,]   FALSE   FALSE     FALSE     FALSE     FALSE\n## [7,]    TRUE   FALSE      TRUE     FALSE     FALSE\n## [8,]   FALSE    TRUE     FALSE      TRUE     FALSE\n\nEjecutar este código nos devuelve valores lógicos o también llamados booleanos como resultado. Cada TRUE o FALSE puede ser contado individualmente, pero ¿cómo lograrías contarlos automáticamente?\n\nsum(roedores&lt;= 25)\n#Ahora utiliza la función which(), ¿cuál es la diferencia?\n\nTambién puedes elegir columnas individuales y realizar el mismo procedimiento. El signo $ señala cual es la columna de la cual quieres tomar los datos.\n\nroedores$roedor1 &gt; 25\n\nLa manipulación de esta clase de objetos será ampliada y tratada con más detenimiento en la siguiente clase.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "index.html#código-de-conducta",
    "href": "index.html#código-de-conducta",
    "title": "Introducción a la Telemetría de Grandes Mamíferos",
    "section": "Código de conducta",
    "text": "Código de conducta\nDebido a la naturaleza del evento, solicitamos mantener una actitud y vocabulario acorde a la actividad, faltas a las reglas del curso y/o problemas de comportamiento podrían provocar que sean expulsados de la sala.\n\nSe les solicita que su plataforma Zoom esté actualizada a la última versión.\nPara ingresar a la reunión, coloca tu nombre y apellido seguido de un guion y tu país de origen (OBLIGATORIO). Por ejemplo: Francisco Castellanos - Ecuador.\nNo mantener prendidas las cámaras web ya que pueden ocupar ancho de banda de la actividad y podrían afectar la conferencia de los expositores.\nLos micrófonos deben permanecer apagados para evitar interrupciones.\nBuscamos que nuestras clases sean interactivas, por lo que alentamos que se encienda el micrófono únicamente para realizar preguntas ocualquier comentario que aporte con al discusión de los temas dictados.",
    "crumbs": [
      "Inicio"
    ]
  },
  {
    "objectID": "intro.html#tidyverse",
    "href": "intro.html#tidyverse",
    "title": "1  Introducción a R",
    "section": "2.1 tidyverse",
    "text": "2.1 tidyverse\nTidyverse es una colección de paquetes que contiene a dplyr y ggplot2. Estos han sido creados para facilitar la manipulación y vsualización de datos mediante gráficos estéticos con varias opciones para modificarlos y presentarlos. Puedes ver algunos ejemplos en la galería oficial de ggplot2, y varios ejemplos sobre las extensiones que han sido escritas para ampliar aún más el funcionamiento de este paquete.\nUna vez hayas activado dplyr, ya puedes buscat datos específicos en el data frame “roedores”.\n\nlibrary(dplyr)\n\n# Filtra por localidad\nfilter(roedores, localidad == \"Quito\")\n\n# Almacena los resultados en un objeto nuevo llamado capital\ncapital &lt;- filter(roedores, localidad == \"Quito\")\ncapital &lt;- select(capital, roedor2)\n\n📚 Tarea\nUtiliza todo lo aprendido en esta clase y el set de datos roedores y responde: ¿cuántos individuos de Guayaquil tienen pesos menores o iguales a 26.5?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "intro.html#ggplot2",
    "href": "intro.html#ggplot2",
    "title": "1  Introducción a R",
    "section": "2.2 ggplot2",
    "text": "2.2 ggplot2\nAhora puedes visualizar los datos de una manera más atractiva y comprensible. Para ello, activa el paquete ggplot2 y ejecuta:\n\nggplot(data = roedores) +\n  geom_point(aes(x = roedor1, y = roedor2),\n             size = 5)\n\n\n\n\n\n\n\n\n📚 Tarea\nUtiliza el manual de ayuda de geom_point() para descifrar como elaboré este gráfico:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "analisis_data.html",
    "href": "analisis_data.html",
    "title": "2  Análisis de datos",
    "section": "",
    "text": "2.1 Importando datos en R\nAntes de ingresar nuestros datos, es muy importante indicar a R cuál será nuestro directorio de trabajo o también llamado Working Directory. Es decir, debemos establecer la carpeta dentro de la cual se encuentran los archivos a utilizar, y donde se exportarán los que generes durante tu trabajo.\nR toma automáticamente un directorio en el cual trabajar. Puedes saber en que directorio estás trabajando con la función getwd().\nExisten algunas formas de establecer el lugar de trabajo. La primera es de manera manual:\nsetwd(\"~/Curso_R/Estadistica_basica\")\nNota que el símbolo ~ se encuentra al inicio del directorio escrito. Este símbolo reemplaza al resultado obtenido de la función getwd.\nLa segunda manera de establecer el directorio es presionando las teclas Ctrl+Shift+H. Inmediatamente se abrirá una ventana en la que podrás seleccionar tu directorio manualmente.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#archivos-csv",
    "href": "analisis_data.html#archivos-csv",
    "title": "2  Análisis de datos",
    "section": "2.2 Archivos csv",
    "text": "2.2 Archivos csv\nAntes de importar nuestros datos, debemos tener claro cuál es la extensión de estos ya que diferentes formatos implican diferentes funciones para importarlos en R.\nTanto los archivos txt y xlsxl resultan un poco más complicados de leer e incluso necesitan la instalación de otros paquetes como readxl. Por otro lado, los archivos csv (comma separated values) con los que trabajarás en esta clase, se pueden importar de esta manera:\n\ndata &lt;- read.csv(\"osos_hema.csv\")\n\n\n\n\n\n\n\nImportant\n\n\n\nAsegúrate que el archivo osos_hema.csv se encuentra en el directorio que indicaste previamente.\n\n\nUna vez que hayas immportado el archivo, lo puedes ver como data frame en el panel Environment. Puedes hacer clic sobre el objeto e inspeccionarlo brevemente.\nRepasa brevemente las funciones que aprendiste en Chapter 1 para obtener datos más específicos sobre el objeto data.\n\nhead(data)\nsummary(data)\nstr(data) #Tipo de variable de nuestro objeto\n\nObservamos que tenemos una cantidad importante de datos faltantes (NA’s). Veamos si estos NA’s son un problema para calcular la media y mediana de la columna colesterol.\n\nmean(data$colesterol)\nmedian(data$colesterol)\n\nLos resultados nos indican que no podemos calcular estas medidas de tendencia sin haber limpiado primeramente el data frame. Para poder hacerlo, podríamos limpiar todo nuestro set de datos, pero se perdería mucha información de esta manera. Por ende, es aconsejable elegir las columnas que nos interesen y realizar la limpieza de NA’s únicamente en éstas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#importando-datos-en-r",
    "href": "analisis_data.html#importando-datos-en-r",
    "title": "2  Análisis de datos",
    "section": "",
    "text": "2.1.1 Archivos csv\nPuedes descargar el achivo utilizado en este tutorial desde este link . Antes de importar este u otro archivo debes tener claro cuál es el tipo de extensión, ya que diferentes formatos implican diferentes funciones para importarlos.\nTanto los archivos txt y xlsxl resultan un poco más complicados de leer e incluso necesitan la instalación de otros paquetes como readxl. Por otro lado, los archivos csv (comma separated values) con los que trabajarás en esta clase, se pueden importar de esta manera:\n\ndata &lt;- read.csv(\"osos_hema.csv\")\n\n\n\n\n\n\n\nImportant\n\n\n\nAsegúrate que el archivo osos_hema.csv se encuentra en el directorio que indicaste previamente.\n\n\nUna vez que hayas importado el archivo, lo puedes ver como data frame en el panel Environment. Puedes hacer clic sobre el objeto e inspeccionarlo brevemente.\nRepasa brevemente las funciones que aprendiste en Chapter 1 para obtener datos más específicos sobre el objeto data.\n\nhead(data)\nsummary(data)\nstr(data)\n\nObserva que hay una gran cantidad de datos faltantes NA’s. ¿Son estos datos faltantes un problema para calcular la media y mediana de la columna colesterol?\n\nmean(data$colesterol)\n## [1] NA\nmedian(data$colesterol)\n## [1] NA\n\nLos resultados muestran que no es posible calcular estas medidas de tendencia sin haber limpiado el data frame. Para poder hacerlo, es aconsejable elegir las columnas de interés y realizar la limpieza de NA’s únicamente en éstas.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "datos_telemetricos.html",
    "href": "datos_telemetricos.html",
    "title": "3  Datos telemétricos",
    "section": "",
    "text": "Estamos trabajando en este tutorial",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Datos telemétricos</span>"
    ]
  },
  {
    "objectID": "areas_vida_1.html",
    "href": "areas_vida_1.html",
    "title": "4  Áreas de vida Parte I",
    "section": "",
    "text": "Estamos trabajando en este tutorial",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Áreas de vida Parte I</span>"
    ]
  },
  {
    "objectID": "areas_vida_2.html",
    "href": "areas_vida_2.html",
    "title": "5  Áreas de vida Parte II",
    "section": "",
    "text": "Estamos trabajando en este tutorial",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Áreas de vida Parte II</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#manipulación-de-data-frames",
    "href": "analisis_data.html#manipulación-de-data-frames",
    "title": "2  Análisis de datos",
    "section": "2.2 Manipulación de data frames",
    "text": "2.2 Manipulación de data frames\nAhora aprenderás a manipular los datos que serán analizados en la sección 2.3, e investigarás si existe alguna diferencia entre la media de colesterol de machos y hembras, y si la hubiera, testearás si esta disimilitud es estadísticamente significativa realizando la prueba de hipótesis estadística T de Student.\nPor último, investigarás si existe correlación entre los niveles de colesterol y triglicéridos en ambos sexos. Para esto necesitas algunos paquetes.\n\nlibrary(tidyverse)\nlibrary(rafalib)\n\nPara deshacerte de los NA's puedes extraer las columnas de interés de una manera parecida a la que has aprendido anteriormente.\n\nlipidos &lt;- data[ ,c(\"colesterol\", \"trigliceridos\", \"sexo\")]\nlipidos &lt;- na.omit(lipidos)\n\n# También puedes buscar las filas que poseen NA’s\nwhich(is.na(data$colesterol))\n\n📚 Tarea\n¿Cómo podrías deshacerte de los NA's utilizando which(is.na())?\n\n2.2.1 pipes\nAhora usarás una de las funciones más populares del paquete magrittr (parte de tidyverse), llamado pipe y escrito como %&gt;%. Este operador se utiliza mucho en lenguaje de programación ya que simplifica la unión de funciones. Sin embargo, desde la versión de R 4.1.0, se introdujo el operador nativo |&gt;. El uso de ambos depende del contexto en el cual son implementados como se discute en este artículo, y hay un gran resumen del uso de cada uno aquí.\nSea cual sea tu elección, ambos pipes se traducen a lenguaje común como “después”, y se utilizan para pasar el output de una primer función hacia una segunda, tercera, etc.\nPuedes aprovechar esta función para simplificar la escritura del código para extraer ciertas columnas de data.\n\n# Extrae las columnas de lipidos y sexo\nlipidos &lt;- data %&gt;%\n            select(colesterol, trigliceridos, sexo) %&gt;%\n            na.omit()\n\n# Extrae las columnas de compuestos nitrogenados y sexo\nnitrogenados &lt;- data %&gt;%\n                select(proteina, bun, sexo) %&gt;%\n                na.omit()\n\nAhora el código es más fácil de interpretar y este se lee como: toma el objeto data; después selecciona las columnas colesterol, triglicéridos y sexo; después omite los NA’s. Esto se lee de igual manera para el objeto nitrogenados.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#subsec-est-basica",
    "href": "analisis_data.html#subsec-est-basica",
    "title": "2  Análisis de datos",
    "section": "2.3 Estadística básica en R",
    "text": "2.3 Estadística básica en R\n\n\n\nSeguimos trabajando en este tutorial",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#sec-est-basica",
    "href": "analisis_data.html#sec-est-basica",
    "title": "2  Análisis de datos",
    "section": "2.3 Estadística básica en R",
    "text": "2.3 Estadística básica en R\nPuedes realizar una exploración rápida de tus datos antes de iniciar análisis específicos. Observemos en un scatterplot como se distribuyen los datos.\n\nplot(data)\n\n\n\n\n\n\n\n\n\n2.3.1 Correlación\nParece ser que hay algún tipo de relación entre las variables de colesterol y triglicéridos. Podemos utilizar la función cor para determinar si de hecho existe alguna correlación.\n\ncor(lipidos$colesterol, lipidos$trigliceridos)\n## [1] 0.4223668\n\nEste resultado, sin embargo, no es muy claro pero recuerda que no estamos separando estos datos basados en otra variable como edad o sexo, que podrían tener una influencia en este resultado. Además, por default cor utiliza el método de Pearson. ¿Cambiaría este resultado en base al uso de otro método?\n\n\n\n\n\n\nEjercicio\n\n\n\nCalcula la correlación de estas variables mediante el método de Spearman.\n\n\nAhora apliquemos más funciones de dplyr junto con los pipes para calcular la correlación en base al sexo.\n\nlipidos %&gt;%\n    group_by(sexo) %&gt;%\n    summarise(cor = cor(colesterol, trigliceridos))\n## # A tibble: 2 × 2\n##   sexo     cor\n##   &lt;chr&gt;  &lt;dbl&gt;\n## 1 hembra 0.340\n## 2 macho  0.473\n\nTambién puedes utilizar ggplot2 para graficar esta posible correlación.\n\nlipidos %&gt;%\n    ggplot(aes( x = colesterol, y = trigliceridos, color = sexo)) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    labs( x = \"colesterol (mg/dl)\", y = \"triglicéridos (mg/dl)\") +\n    theme_bw()\n\n\n\n\n\n\n\n\n\n\n2.3.2 Diferencias de medias\nAhora utiliza el objeto nitrogenados e inspecciona en detalle alguna diferencia entre machos y hembras.\n\nnitrogenados %&gt;%\n    select(bun, sexo) %&gt;%\n    group_by(sexo) %&gt;%\n    summarise(media = mean(bun),\n                mediana = median(bun),\n                desv_est = sd(bun))\n\nEstas posibles diferencias también pueden ser observadas también mediante un gráfico decaja y biggotes.\n\nboxplot(nitrogenados$bun ~ nitrogenados$sexo)\n\n\n\n\n\n\n\nboxplot(nitrogenados$proteina ~ nitrogenados$sexo)\n\n\n\n\n\n\n\n\nLa diferencia de medidas de tendencia entre sexos no es clara. Sin embargo, ¿cómo podemos saber que esta diferencia es o no estadísticamente significativa?\nAunque a fines de este ejemplo, utilizaremos el test de Student para calcular el valor p, es necesario aclarar que no profundizaremos en detalles matemáticos o discutiremos sobre que tipos de test podrían contestar esta pregunta de mejor manera. Si deseas tener más conocimiento sobre temas estadísticos, dirígete a la sección de Fuentes de este documento y descarga los libros y documentos que sean de tu interés.\nPrimero, debemos observar si nuestros datos siguen una distribución normal. Para esto utilizaremos funciones base de R y además la función mypar() del paquete rafalib que instalamos previamente.\n\nmypar(1,2)\n# Grafica un histograma\nhist(nitrogenados$bun, main = \"Distribución de valores de Urea en sangre\")\n\n# y además\nqqnorm(nitrogenados$bun)\nqqline(nitrogenados$bun)\n\n\n\n\n\n\n\n\nSi deseas saber más sobre el significado de los Q-Q plots, ingresa aquí.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#sec:est-basica",
    "href": "analisis_data.html#sec:est-basica",
    "title": "2  Análisis de datos",
    "section": "2.3 Estadística básica en R",
    "text": "2.3 Estadística básica en R\n\n\n\nSeguimos trabajando en este tutorial",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#personalizando-gráficos-con-ggplot2",
    "href": "analisis_data.html#personalizando-gráficos-con-ggplot2",
    "title": "2  Análisis de datos",
    "section": "2.6 Personalizando gráficos con ggplot2",
    "text": "2.6 Personalizando gráficos con ggplot2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#fuentes",
    "href": "analisis_data.html#fuentes",
    "title": "2  Análisis de datos",
    "section": "2.7 Fuentes",
    "text": "2.7 Fuentes\nEste capítulo fue tomado y adaptado de diversas fuentes, siendo R for Data Science y el curso gratis de edX Statistics and R, las más grandes influencias de este trabajo.\nTanto el análisis estadístico como la creación de gráficos utilizando ggplot2 son temas muy amplios para los cuales existen una amplia gama de recursos en internet. En cuanto a la parte estadística, he hecho una recopilación muy breve de libros que abordan estos temas, así como también sobre la investigación reproducible, su importancia, y como llevarla a cabo en R. Para acceder a estos recursos haz clic aquí.\nFinalmente, puedes profundizar más en el uso de ggplot2 ingresando a: Data Visualization with R , Top 50 ggplot2 Visualizations y Data visualization with ggplot2.\n\n\n\nSeguimos trabajando en este tutorial",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#t-test",
    "href": "analisis_data.html#t-test",
    "title": "2  Análisis de datos",
    "section": "2.4 t-Test",
    "text": "2.4 t-Test\nAhora que sabemos que los niveles de colesterol siguen una distribución normal, estamos listos para calcular el valor p. Primero necesitamos separar en dos objetos a nuestro objeto lipidos. ¿Por qué?\n\n# Crea un objeto con los machos\nbun_m &lt;- nitrogenados%&gt;%\n            filter(sexo == \"macho\") %&gt;%\n                select(bun) %&gt;% unlist()\n\n# Ahora uno con las hembras\nbun_h &lt;- nitrogenados %&gt;%\n            filter(sexo == \"hembra\") %&gt;%\n                select(bun) %&gt;% unlist()\n\n\n\n\n\n\n\nEjercicio\n\n\n\n¿Cómo fueron almacenados los objetos col_m y col_h?. Lee sobre unlist en la sección de Ayuda.\n\n\nAhora puedes realizar la prueba T de Studentcon la seguridad de que tus datos siguen una distribución normal.\n\nt.test(bun_h, bun_m, var.equal = T)\n\n#Si solo quieres obtener el valor de p\nt.test(bun_h, bun_m, var.equal = T)$p.value\n\nEl p-value = 0.002837017, quiere decir que hay muy baja probabilidad de que la diferencia de medias en los niveles de urea en sangre se deba a un error de muestreo o al azar. Consecuentemente, la hipótesis nula queda rechazada y aceptamos la hipótesis alternativa.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#análisis-de-componentes-principales",
    "href": "analisis_data.html#análisis-de-componentes-principales",
    "title": "2  Análisis de datos",
    "section": "2.5 Análisis de Componentes Principales",
    "text": "2.5 Análisis de Componentes Principales",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "analisis_data.html#t-de-student",
    "href": "analisis_data.html#t-de-student",
    "title": "2  Análisis de datos",
    "section": "2.4 T de Student",
    "text": "2.4 T de Student\nAhora que tienes evidencia de que los niveles de urea en sangre se aproximan a una distribución normal, puedes calcular el valor p. Primero necesitas subdividir al objeto nitrogenados.\n\n# Crea un objeto con los machos\nbun_m &lt;- nitrogenados%&gt;%\n            filter(sexo == \"macho\") %&gt;%\n                select(bun) %&gt;% unlist()\n\n# Ahora uno con las hembras\nbun_h &lt;- nitrogenados %&gt;%\n            filter(sexo == \"hembra\") %&gt;%\n                select(bun) %&gt;% unlist()\n\n\n\n\n\n\n\nEjercicio\n\n\n\n¿Cómo fueron almacenados los objetos col_m y col_h?. Lee sobre unlist en la sección de Ayuda.\n\n\nPuedes entonces realizar la prueba T de Student con una sola línea de comando.\n\nt.test(bun_h, bun_m, var.equal = T)\n\n#Si solo quieres obtener el valor de p\nt.test(bun_h, bun_m, var.equal = T)$p.value\n\nEl p-value = 0.002837017, quiere decir que hay muy baja probabilidad de que la diferencia de medias en los niveles de urea en sangre se deba a un error de muestreo o al azar. Consecuentemente, la hipótesis nula queda rechazada y aceptamos la hipótesis alternativa.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Análisis de datos</span>"
    ]
  },
  {
    "objectID": "index.html#expositores",
    "href": "index.html#expositores",
    "title": "Introducción a la Telemetría de Grandes Mamíferos",
    "section": "Expositores",
    "text": "Expositores\nEstudiantes y profesionales brindarán charlas para mostrar el trabajo que llevan a cabo en sus países.\n\nLas horas corresponden al horario de Ecuador (GMT -5)\n\n\n\n\n\n\n\nFecha\nExpositor\nTema\n\n\n\n\nMarzo 1, 2024 11:00 - 11:30\nDra. Diorene Smith Cabellos - Panamá\nBlindando de la extinción al perezoso pigmeo\n\n\nMarzo 4, 2024 11:00 - 11:30\nJorge Brito - Ecuador\nA definir\n\n\nMarzo 5, 2024 10:30 - 11:00\nAngela Alviz - Colombia\nOcupación, patrones de actividad y abundancia relativa de la danta de tierras bajas (Tapirus terrestris) en Arauca, Colombia\n\n\nMarzo 5, 2024 11:00 - 11:30\nValentina López - Colombia\nPatrones intersexuales de la conducta de marcaje por olor del oso andino (Tremarctos ornatus) en el corredor biológico Guácharos-Puracé\n\n\nMarzo 7, 2024 11:00 - 11:30\nChristian Loaiza - Ecuador\nEl zorro de Séchura en Ecuador situación actual y estado de conservación",
    "crumbs": [
      "Inicio"
    ]
  }
]